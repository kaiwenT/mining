<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hust.dao.mapper.IssueInfoMapper">
  <resultMap id="BaseResultMap" type="com.hust.model.IssueInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="issue_id" jdbcType="VARCHAR" property="issueId" />
    <result column="issue_name" jdbcType="VARCHAR" property="issueName" />
    <result column="create_time" jdbcType="DATE" property="createTime" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="source_type" jdbcType="VARCHAR" property="sourceType" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.hust.model.IssueInfoWithBLOBs">
    <result column="content" jdbcType="LONGVARBINARY" property="content" />
    <result column="result_list" jdbcType="LONGVARBINARY" property="resultList" />
    <result column="result_json" jdbcType="LONGVARBINARY" property="resultJson" />
    <result column="paint_json" jdbcType="LONGVARBINARY" property="paintJson" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, issue_id, issue_name, create_time, creator, source_type
  </sql>
  <sql id="Blob_Column_List">
    content, result_list, result_json, paint_json
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.hust.model.IssueInfoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from issue_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.hust.model.IssueInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from issue_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from issue_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from issue_info
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hust.model.IssueInfoExample">
    delete from issue_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hust.model.IssueInfoWithBLOBs">
    insert into issue_info (id, issue_id, issue_name, 
      create_time, creator, source_type, 
      content, result_list, result_json, 
      paint_json)
    values (#{id,jdbcType=BIGINT}, #{issueId,jdbcType=VARCHAR}, #{issueName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=DATE}, #{creator,jdbcType=VARCHAR}, #{sourceType,jdbcType=VARCHAR}, 
      #{content,jdbcType=LONGVARBINARY}, #{resultList,jdbcType=LONGVARBINARY}, #{resultJson,jdbcType=LONGVARBINARY}, 
      #{paintJson,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.hust.model.IssueInfoWithBLOBs">
    insert into issue_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="issueId != null">
        issue_id,
      </if>
      <if test="issueName != null">
        issue_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="creator != null">
        creator,
      </if>
      <if test="sourceType != null">
        source_type,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="resultList != null">
        result_list,
      </if>
      <if test="resultJson != null">
        result_json,
      </if>
      <if test="paintJson != null">
        paint_json,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="issueId != null">
        #{issueId,jdbcType=VARCHAR},
      </if>
      <if test="issueName != null">
        #{issueName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=DATE},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="sourceType != null">
        #{sourceType,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARBINARY},
      </if>
      <if test="resultList != null">
        #{resultList,jdbcType=LONGVARBINARY},
      </if>
      <if test="resultJson != null">
        #{resultJson,jdbcType=LONGVARBINARY},
      </if>
      <if test="paintJson != null">
        #{paintJson,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hust.model.IssueInfoExample" resultType="java.lang.Long">
    select count(*) from issue_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update issue_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.issueId != null">
        issue_id = #{record.issueId,jdbcType=VARCHAR},
      </if>
      <if test="record.issueName != null">
        issue_name = #{record.issueName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=DATE},
      </if>
      <if test="record.creator != null">
        creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.sourceType != null">
        source_type = #{record.sourceType,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.resultList != null">
        result_list = #{record.resultList,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.resultJson != null">
        result_json = #{record.resultJson,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.paintJson != null">
        paint_json = #{record.paintJson,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update issue_info
    set id = #{record.id,jdbcType=BIGINT},
      issue_id = #{record.issueId,jdbcType=VARCHAR},
      issue_name = #{record.issueName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=DATE},
      creator = #{record.creator,jdbcType=VARCHAR},
      source_type = #{record.sourceType,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=LONGVARBINARY},
      result_list = #{record.resultList,jdbcType=LONGVARBINARY},
      result_json = #{record.resultJson,jdbcType=LONGVARBINARY},
      paint_json = #{record.paintJson,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update issue_info
    set id = #{record.id,jdbcType=BIGINT},
      issue_id = #{record.issueId,jdbcType=VARCHAR},
      issue_name = #{record.issueName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=DATE},
      creator = #{record.creator,jdbcType=VARCHAR},
      source_type = #{record.sourceType,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hust.model.IssueInfoWithBLOBs">
    update issue_info
    <set>
      <if test="issueId != null">
        issue_id = #{issueId,jdbcType=VARCHAR},
      </if>
      <if test="issueName != null">
        issue_name = #{issueName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=DATE},
      </if>
      <if test="creator != null">
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="sourceType != null">
        source_type = #{sourceType,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARBINARY},
      </if>
      <if test="resultList != null">
        result_list = #{resultList,jdbcType=LONGVARBINARY},
      </if>
      <if test="resultJson != null">
        result_json = #{resultJson,jdbcType=LONGVARBINARY},
      </if>
      <if test="paintJson != null">
        paint_json = #{paintJson,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hust.model.IssueInfoWithBLOBs">
    update issue_info
    set issue_id = #{issueId,jdbcType=VARCHAR},
      issue_name = #{issueName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE},
      creator = #{creator,jdbcType=VARCHAR},
      source_type = #{sourceType,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARBINARY},
      result_list = #{resultList,jdbcType=LONGVARBINARY},
      result_json = #{resultJson,jdbcType=LONGVARBINARY},
      paint_json = #{paintJson,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hust.model.IssueInfo">
    update issue_info
    set issue_id = #{issueId,jdbcType=VARCHAR},
      issue_name = #{issueName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE},
      creator = #{creator,jdbcType=VARCHAR},
      source_type = #{sourceType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>